import type { PlaygroundFile } from "../../../playground.marko";
export interface Input {
  value: PlaygroundFile[];
  markoVersion: string;
  selected: number;
}
client import { compileAst } from "../utils/compile";
client import { highlighter } from "../../init-shiki-monaco";

const/files=input.value

let/compiled=(null as Awaited<ReturnType<typeof compileAst>> | null)
let/showLoadingMessage=false

lifecycle onMount() {
  setTimeout(() => {
    if (compiled === null) {
      showLoadingMessage = true;
    }
  }, 500);
}

script=async () => {
  const timeout = setTimeout(() => {
    showLoadingMessage = true;
  }, 500)
  compiled = await compileAst(files, input.markoVersion, files[input.selected].path)
  clearTimeout(timeout);
  showLoadingMessage = false;
}

if=showLoadingMessage -- Installing Packages...
else if=compiled && "error" in compiled
  pre.codeOutput -- ${compiled.error}
else if=compiled
  const/highlighted=highlighter.codeToHtml(JSON.stringify(compiled.ast, null, 2), {
    lang: "json",
    themes: {
      light: "marko-light",
      dark: "marko-dark"
    }
  })
  pre.codeOutput -- $!{highlighted}

style
  --
  pre.codeOutput {
    overflow-y: scroll;
    margin: 0 0.5rem;
  }
  --
