import type { PlaygroundFile } from "../playground.marko";

export interface Input {
  files: PlaygroundFile[];
  filesChange?: (files: PlaygroundFile[]) => void;
  tabIndex?: number;
  tabIndexChange?: (tabIndex: number) => void;
}

client import "./init-shiki-monaco"
client import * as monaco from "monaco-editor-core";

let/files:=input.files
let/selected=(input.tabIndex || 0) valueChange=input.tabIndexChange

let/file=(files.at(selected) as PlaygroundFile) valueChange(newValue) {
  files = files.toSpliced(selected, 1, newValue);
}

tabs [
  files:=files
  selected:=selected
]
div.editor/container

let-match-media/darkMode="(prefers-color-scheme: dark)"
lifecycle<{
  editor?: monaco.editor.IStandaloneCodeEditor;
  changeHandler?: monaco.IDisposable;
  updatedInternally?: boolean;
}> onMount() {
    this.editor = monaco.editor.create(container(), {
      theme: window.matchMedia("(prefers-color-scheme: dark)").matches ? "marko-dark" : "marko-light",
      automaticLayout: true,
      tabSize: 2,
    });
  } onUpdate() {
    if (this.updatedInternally) {
      this.updatedInternally = false;
    } else {
      monaco.editor.setTheme(darkMode ? "marko-dark" : "marko-light");
      if (file) {
        this.changeHandler?.dispose();

        const model = this.editor!.getModel()!;
        model.setValue(file.content);
        monaco.editor.setModelLanguage(
          model,
          file.path.substring(file.path.lastIndexOf(".") + 1),
        );

        this.changeHandler = this.editor!.onDidChangeModelContent(() => {
          file = { ...file, content: this.editor?.getValue() || "" };
          this.updatedInternally = true;
        });
      }
    }
  } onDestroy() {
    this.editor?.getModel()?.dispose();
    this.editor?.dispose();
  }

style
  --
  .editor {
    height: 100%;
  }
  --
